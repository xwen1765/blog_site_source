"use strict";(self.webpackChunkhaochen_blog=self.webpackChunkhaochen_blog||[]).push([[8669],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>d});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var i=n.createContext({}),s=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},b="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(o),h=a,d=b["".concat(i,".").concat(h)]||b[h]||u[h]||r;return o?n.createElement(d,l(l({ref:t},p),{},{components:o})):n.createElement(d,l({ref:t},p))}));function d(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=h;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[b]="string"==typeof e?e:a,l[1]=c;for(var s=2;s<r;s++)l[s]=o[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},7498:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var n=o(7462),a=(o(7294),o(3905));const r={slug:"understand-copy-in-js",title:"Shallow Copy vs. Deep Copy",author:"Haochen Qi",author_title:"Fullstack Developer",author_url:"https://github.com/HaochenQ",author_image_url:"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4",tags:["Javascript","Deep Copy","Shallow Copy"]},l="Understanding Object Copying in JavaScript",c={permalink:"/zh-cn/blog/understand-copy-in-js",source:"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-14-copy-in-js.md",title:"Shallow Copy vs. Deep Copy",description:"question",date:"2021-04-14T00:00:00.000Z",formattedDate:"2021\u5e744\u670814\u65e5",tags:[{label:"Javascript",permalink:"/zh-cn/blog/tags/javascript"},{label:"Deep Copy",permalink:"/zh-cn/blog/tags/deep-copy"},{label:"Shallow Copy",permalink:"/zh-cn/blog/tags/shallow-copy"}],readingTime:3.475,hasTruncateMarker:!0,authors:[{name:"Haochen Qi",title:"Fullstack Developer",url:"https://github.com/HaochenQ",imageURL:"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4"}],frontMatter:{slug:"understand-copy-in-js",title:"Shallow Copy vs. Deep Copy",author:"Haochen Qi",author_title:"Fullstack Developer",author_url:"https://github.com/HaochenQ",author_image_url:"https://avatars1.githubusercontent.com/u/44130343?s=400&u=a5a4729addf5c5b972d1d6220546273ff6e00eb4&v=4",tags:["Javascript","Deep Copy","Shallow Copy"]},prevItem:{title:"How to Upload Files to AWS S3 in Node.js?",permalink:"/zh-cn/blog/upload-files-to-s3-iwth-node"},nextItem:{title:"Django project - A Twitter Like Web APP",permalink:"/zh-cn/blog/djang0-blog"}},i={authorsImageUrls:[void 0]},s=[{value:"Shallow copy",id:"shallow-copy",level:2},{value:"Deep copy",id:"deep-copy",level:2},{value:"Use a JavaScript library to deep copy objects",id:"use-a-javascript-library-to-deep-copy-objects",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:s},b="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(b,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"question",src:o(7107).Z,width:"2886",height:"1747"}),"\nObjects are the basic blocks of JavaScript. An object is a collection of attributes, and an attribute is an association between a key (or name) and a value. Almost all objects in JavaScript are Object instances at the top of the prototype chain."),(0,a.kt)("p",null,"When it comes to copying objects in JavaScript, you need to know whether you need to do a shallow copying or a deep copying. In this article, we will go through these two different ways to copy objects."),(0,a.kt)("h2",{id:"shallow-copy"},"Shallow copy"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Shallow copy"),": When using the assignment operator to copy a reference variable to a new reference variable, a shallow copy of the referenced object will be created. In short, a reference variable mainly stores the address of the object it refers to. After assigning the value of the old reference variable to the new reference variable, copy the address stored in the old reference variable to the new reference variable. This means that both the old reference variable and the new reference variable point to the same object in memory. As a result, if the state of the object changes through any reference variable, both will be reflected. Let's see an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'function example() {\n  "use strict";\n\n  let obj1 = { a: 0, b: { c: 0 } };\n  let obj2 = Object.assign({}, obj1);\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 0}}\n\n  obj1.a = 1;\n  console.log(JSON.stringify(obj1)); // { "a": 1, "b": { "c": 0}}\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 0}}\n\n  obj2.a = 2;\n  console.log(JSON.stringify(obj1)); // { "a": 1, "b": { "c": 0}}\n  console.log(JSON.stringify(obj2)); // { "a": 2, "b": { "c": 0}}\n\n  obj1.b.c = 3;\n  console.log(JSON.stringify(obj1)); // { "a": 1, "b": { "c": 3}}\n  console.log(JSON.stringify(obj2)); // { "a": 2, "b": { "c": 3}}\n}\n\nexample();\n')),(0,a.kt)("p",null,"After ES6 released, we can also use ",(0,a.kt)("strong",{parentName:"p"},"spread operator")," to shallow copy objects."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'function example() {\n  let obj1 = { a: 0, b: { c: 0 } };\n  let obj2 = { ...obj1 };\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 0}}\n  obj1.a = 4;\n  obj1.b.c = 4;\n  console.log(JSON.stringify(obj1)); // { "a": 4, "b": { "c": 4}}\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 4}}\n}\n\nexample();\n')),(0,a.kt)("h2",{id:"deep-copy"},"Deep copy"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Deep copy"),": Unlike shallow copy, deep copy copies all members of the old object, allocates a separate memory location for the new object, and then assigns the copied members to the new object. In this way, the two objects are independent of each other, and in the case of any modification to any one object, the other object is not affected. Similarly, if one of the objects is deleted, the other remains in memory. Now, to create a deep copy of the object in JavaScript, we use the JSON.parse() and JSON.stringify() methods. Let us see the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'function example() {\n  let obj1 = { a: 0, b: { c: 0 } };\n  let obj2 = JSON.parse(JSON.stringify(obj1));\n  obj1.a = 4;\n  obj1.b.c = 4;\n  console.log(JSON.stringify(obj1)); // { "a": 4, "b": { "c": 4}}\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 0}}\n}\n\nexample();\n')),(0,a.kt)("h2",{id:"use-a-javascript-library-to-deep-copy-objects"},"Use a JavaScript library to deep copy objects"),(0,a.kt)("p",null,"There are several javascript libraries can provide objects operation utilities like ",(0,a.kt)("strong",{parentName:"p"},"underscore")," and ",(0,a.kt)("strong",{parentName:"p"},"lodash"),". In this article, we will introduce you how to use ",(0,a.kt)("strong",{parentName:"p"},"lodash")," to deep copy objects."),(0,a.kt)("p",null,"Lodash is a JavaScript library that provides multiple utility functions, and one of the most commonly used functions in the Lodash library is the cloneDeep() method. This method helps to clone objects in depth, and can also clone the limitations of the JSON.stringify() method, that is, non-serializable properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const _ = require("lodash");\n\nfunction example() {\n  let obj1 = { a: 0, b: { c: 0 } };\n  let obj2 = _.cloneDeep(obj1);\n  obj1.a = 4;\n  obj1.b.c = 4;\n  console.log(JSON.stringify(obj1)); // { "a": 4, "b": { "c": 4}}\n  console.log(JSON.stringify(obj2)); // { "a": 0, "b": { "c": 0}}\n}\n\nexample();\n')),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Copying objects in JavaScript can be quite daunting especially if you\u2019re new to JavaScript and don\u2019t know your way around the language. Hopefully this article helped you understand and avoid future pitfalls you may encounter copying objects."),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Reference: ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"},"MDN|Web Docs")))}u.isMDXComponent=!0},7107:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/question-21d989d4a8c3f8606182539040ebd149.jpg"}}]);